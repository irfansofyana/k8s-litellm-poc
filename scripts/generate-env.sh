#!/usr/bin/env bash
set -euo pipefail

# generate-env.sh: Generate a secure .env file with random passwords

ENV_FILE=".env"
TEMP_FILE=".env.tmp"

usage() {
  cat <<'EOF'
Usage: ./scripts/generate-env.sh

Generates a secure .env file with 40-character random passwords for:
  - POSTGRES_PASSWORD (database password)
  - LITELLM_MASTER_KEY (LiteLLM API authentication key)

If .env already exists, you will be prompted before overwriting.

The generated passwords use only alphanumeric characters (A-Za-z0-9) to avoid
shell quoting issues.

Requirements:
  - openssl (preferred) or /dev/urandom

EOF
}

if [[ "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
  usage
  exit 0
fi

# Check for required tools
if ! command -v openssl >/dev/null 2>&1; then
  echo "Warning: openssl not found. Falling back to /dev/urandom for password generation."
  if [[ ! -r /dev/urandom ]]; then
    echo "Error: Neither openssl nor /dev/urandom is available. Cannot generate secure password." >&2
    exit 1
  fi
fi

# Check if .env already exists
if [[ -f "$ENV_FILE" ]]; then
  echo "Warning: $ENV_FILE already exists."
  read -r -p "Overwrite? (y/N) " CONFIRM
  if [[ ! "${CONFIRM:-N}" =~ ^[Yy]$ ]]; then
    echo "Aborted. Existing $ENV_FILE was not modified."
    exit 0
  fi
fi

# Generate secure 40-character alphanumeric passwords
echo "Generating secure passwords..."

generate_password() {
  if command -v openssl >/dev/null 2>&1; then
    # Use openssl for random bytes, then filter to alphanumeric
    openssl rand -base64 64 | tr -dc 'A-Za-z0-9' | head -c 40
  else
    # Fallback to /dev/urandom
    LC_ALL=C tr -dc 'A-Za-z0-9' < /dev/urandom | head -c 40
  fi
}

POSTGRES_PASSWORD="$(generate_password)"
LITELLM_MASTER_KEY="$(generate_password)"

# Validate we got 40-character passwords
if [[ ${#POSTGRES_PASSWORD} -ne 40 ]]; then
  echo "Error: Failed to generate a 40-character POSTGRES_PASSWORD (got ${#POSTGRES_PASSWORD} characters)." >&2
  exit 1
fi

if [[ ${#LITELLM_MASTER_KEY} -ne 40 ]]; then
  echo "Error: Failed to generate a 40-character LITELLM_MASTER_KEY (got ${#LITELLM_MASTER_KEY} characters)." >&2
  exit 1
fi

# Write to temp file atomically
echo "# Secure credentials for k8s-litellm-poc" > "$TEMP_FILE"
echo "# This file should NOT be committed to git" >> "$TEMP_FILE"
echo "# Generated by scripts/generate-env.sh" >> "$TEMP_FILE"
echo "" >> "$TEMP_FILE"
echo "# PostgreSQL password for docker-compose" >> "$TEMP_FILE"
echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> "$TEMP_FILE"
echo "" >> "$TEMP_FILE"
echo "# LiteLLM master key for API authentication" >> "$TEMP_FILE"
echo "LITELLM_MASTER_KEY=$LITELLM_MASTER_KEY" >> "$TEMP_FILE"

# Move atomically and set permissions
mv "$TEMP_FILE" "$ENV_FILE"
chmod 600 "$ENV_FILE"

echo "[SUCCESS] $ENV_FILE created with secure credentials:"
echo "          - POSTGRES_PASSWORD (40 characters)"
echo "          - LITELLM_MASTER_KEY (40 characters)"
echo "          File permissions set to 600 (owner read/write only)."
echo ""
echo "Next steps:"
echo "  1. docker compose up -d"
echo "  2. export OPENROUTER_API_KEY=<your-key>"
echo "  3. ./vault/init-vault-secrets.sh  (stores all secrets in Vault)"
